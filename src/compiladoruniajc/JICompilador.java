/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compiladoruniajc;

import java.util.ArrayList;

/**
 *
 * @author Jonathan
 */
public class JICompilador extends javax.swing.JInternalFrame {

    private ArrayList codigo = new ArrayList();
    public JICompilador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btn_ejecutar = new javax.swing.JButton();
        btn_limpiar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_source = new javax.swing.JTextArea();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_output = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Compilador JAVA UNIAJC");
        setToolTipText("");

        jToolBar1.setRollover(true);

        btn_ejecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladoruniajc/recursos/flecha.png"))); // NOI18N
        btn_ejecutar.setToolTipText("Run");
        btn_ejecutar.setFocusable(false);
        btn_ejecutar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_ejecutar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ejecutarActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_ejecutar);

        btn_limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladoruniajc/recursos/limpiar.png"))); // NOI18N
        btn_limpiar.setToolTipText("Clean");
        btn_limpiar.setFocusable(false);
        btn_limpiar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_limpiar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limpiarActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_limpiar);

        ta_source.setColumns(20);
        ta_source.setRows(5);
        jScrollPane1.setViewportView(ta_source);

        jTabbedPane1.addTab("Source", jScrollPane1);

        ta_output.setBackground(new java.awt.Color(0, 0, 0));
        ta_output.setColumns(20);
        ta_output.setForeground(new java.awt.Color(102, 255, 51));
        ta_output.setRows(5);
        jScrollPane2.setViewportView(ta_output);

        jTabbedPane2.addTab("Output", jScrollPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limpiarActionPerformed
        ta_source.setText("");
        ta_output.setText("");
    }//GEN-LAST:event_btn_limpiarActionPerformed

    private void btn_ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ejecutarActionPerformed
        try {
                         
            ta_output.setText("");
            codigo = new ArrayList();
            ArrayList codigoFuente = limpiar();
            analisisLexico(Caso(codigoFuente), codigoFuente);

        } catch (Exception e) {
            System.out.println("CODIGO VACIO " + e.getClass());
            ta_output.setText("FAVOR INGRESAR UNA SENTENCIA EN JAVA");
        }
    }//GEN-LAST:event_btn_ejecutarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ejecutar;
    private javax.swing.JButton btn_limpiar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea ta_output;
    private javax.swing.JTextArea ta_source;
    // End of variables declaration//GEN-END:variables
private ArrayList limpiar() {//quita espacios en blanco y saltos de linea
        String codigoFuente = ta_source.getText();
        ArrayList retorno = new ArrayList();
        try {
            codigoFuente = codigoFuente.replaceAll(" ", "");
            String aux = "";
            byte guardaLinea = 1, guardaBloque = 1;
            for (int i = 0; i < codigoFuente.length(); i++) {
                if (codigoFuente.length() > (i + 1) && codigoFuente.charAt(i) == '/' && codigoFuente.charAt(i + 1) == '/' && guardaBloque == 1) {
                    guardaLinea = 0;//0: no guarda
                }
                if (codigoFuente.length() > (i + 1) && codigoFuente.charAt(i) == '/' && codigoFuente.charAt(i + 1) == '*' && guardaLinea == 1) {
                    guardaBloque = 0;//0: no guarda
                }
                if (i > 0 && codigoFuente.charAt(i) == '/' && codigoFuente.charAt(i - 1) == '*') {
                    guardaBloque = 2;//1: si guarda
                }
                if (codigoFuente.charAt(i) == '\n' && guardaBloque == 1) {
                    guardaLinea = 1;//1: si guarda
                    if (aux.length() > 0) {
                        retorno.add(aux);
                        aux = "";
                    }
                } else {
                    if (i == codigoFuente.length() - 1) {
                        aux += codigoFuente.charAt(i);
                        retorno.add(aux);
                    }
                }
                if (guardaBloque == 1 && guardaLinea == 1 && codigoFuente.charAt(i) != '\n') {
                    aux += codigoFuente.charAt(i);
                }
                if (guardaBloque == 2) {
                    guardaBloque--;
                }
            }
        } catch (Exception e) {
            System.out.println("errror " + e.getClass());
        } finally {
            return retorno;
        }
    }

    private int Caso(ArrayList fuente) {
        int retorno = 0;
        String codigoFuenta = fuente.get(0).toString().toLowerCase();
        try {
            if (codigoFuenta.startsWith("for")) {
                retorno = 1;
            } else {
                if (codigoFuenta.startsWith("if")) {
                    retorno = 2;
                } else {
                    if (codigoFuenta.startsWith("int")) {
                        retorno = 3;
                    } else {
                        if (codigoFuenta.startsWith("String")) {
                            retorno = 4;
                        } else {
                        }
                        if (codigoFuenta.startsWith("while")) {
                            retorno = 5;
                        } else {
                            if (codigoFuenta.startsWith("do")) {
                                retorno = 6;

                            } else {//evalua los nuevos casos lexicos
                                int i = 0, j = 0;
                                String linea = "", texto = "";
                                while (i < fuente.size()) {//recolecta la cadena que se encuentra antes de la primera llave izquierda
                                    linea = fuente.get(i).toString();
                                    while (j < linea.length()) {
                                        if (linea.charAt(j) == '(') {
                                            j += linea.length();
                                            i += fuente.size();
                                        } else {
                                            texto += linea.charAt(j);
                                        }
                                        j++;
                                    }
                                    i++;
                                }
                                if (texto.length() > 0) {
                                    String retorn[] = new String[2];
                                    //evalua si hay transposicion
                                    retorn = Transposicion(texto);
                                    if (retorn[0].equals("1")) {
                                        //evalua si hay un caracter sobrante
                                        retorn = Sobrante(texto);
                                        if (retorn[0].equals("1")) {
                                            //evalua si hay un caracter que no perteneece
                                            retorn = noPertenece(texto);
                                            if (retorn[0].equals("1")) {
                                                //evalua si le falta un caracter
                                                retorn = faltaCaracer(texto);
                                                if (retorn[0].equals("1")) {
                                                    ta_output.setText("Sintáctico: mala construcción de la sentencia.");
                                                    retorno = 7;
                                                } else {
                                                    ta_output.setText(retorn[1]);
                                                    retorno = 7;
                                                }
                                            } else {
                                                ta_output.setText(retorn[1]);
                                                retorno = 7;
                                            }
                                        } else {
                                            ta_output.setText(retorn[1]);
                                            retorno = 7;
                                        }
                                    } else {
                                        ta_output.setText(retorn[1]);
                                        retorno = 7;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
        } finally {
            return retorno;
        }
    }

    private void CasoVector(ArrayList codigoFuente) {
        String texto = "", linea = "";
        String var[] = null;
        int con = 0;
        for (int i = 0; i < codigoFuente.size(); i++) {
            linea = codigoFuente.get(i).toString();
            for (int j = 0; j < linea.length(); j++) {

                /* if (j < linea.length() - 1) {
               
                 }*/

                if (linea.charAt(j) == '=') {
                    texto = "";
                } else {
                    ta_output.setText("Línea " + (i + 1) + ": Sintactico: No se encontro =");
                    break;
                }
                if (linea.charAt(j) == '[') {
                    texto = "";
                    if (con != 2) {
                        ta_output.setText("Línea " + (i + 1) + ": lexico: esta mal escrita la palabra String ");
                        break;
                    } else {
                        if (linea.charAt(j + 1) == ']') {
                            ta_output.setText("Línea " + (i + 1) + ": sintactico :falta tamaño del vector ");
                            break;
                        }
                    }
                } else {
                    ta_output.setText("Línea " + (i + 1) + ": sintactico : falta corchete izquierdo ");
                    break;
                }
                if (linea.charAt(j + 1) == ']') {
                    if (esNumero(texto) == false) {
                        ta_output.setText("Línea " + (i + 1) + ": sintactico :tamaño del vector incorrecto");
                        break;
                    }
                }
                if (linea.charAt(j) == ']') {
                    if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == ';') {
                        ta_output.setText("Compilado Correctamente");
                        break;
                    } else {
                        ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta punto y coma");
                        break;
                    }
                }
                texto += linea.charAt(j);
                if (texto.equals("new")) {
                    texto = "";
                } else {
                    ta_output.setText("Línea " + (i + 1) + ": Lexico: mal escrita la palabra new");
                    break;
                }
                if (texto.equals("String")) {
                    con++;
                    if (linea.charAt(j + 1) == '=') {
                        ta_output.setText("Línea " + (i + 1) + ": Sintactico: No se encontro nombre de la variable");
                        break;
                    }
                }
            }
        }
    }

    private void analisisLexico(int Caso, ArrayList codigoFuente) {

        try {
            switch (Caso) {
                case 0:
                    ta_output.setText("Linea 1: Sintactico: No se encontro ninguna palabra reservada");
                    break;
                case 1://for                    
                    if (codigoFuente.get(0).toString().substring(0, 3).equals("for")) {
                        casoFor(codigoFuente);
                    } else {
                        ta_output.setText("Línea 1: Léxico: - el for esta mal escrito");
                    }
                    break;
                case 2://if
                    System.out.println("select if");
                    if (codigoFuente.get(0).toString().substring(0, 2).equals("if")) {
                        casoIf(codigoFuente);
                    } else {
                        ta_output.setText("Línea 1: Léxico: - se encuentra mal escrito el if");
                    }
                    break;
                case 3://int
                    if (codigoFuente.get(0).toString().substring(0, 3).equals("int")) {
                        casoInt(codigoFuente);
                    } else {
                        ta_output.setText("Línea 1: Léxico: - se encuentra mal escrito el int");
                    }
                    break;
                case 4://Vector
                    if (codigoFuente.get(0).toString().substring(0, 6).equals("String")) {
                    } else {
                        ta_output.setText("Línea 1: Léxico: - se encuentra mal escrito el String");
                    }
                    break;
                case 5://while
                    if (codigoFuente.get(0).toString().substring(0, 5).equals("while")) {
                        casoWhile(codigoFuente);
                    } else {
                        ta_output.setText("Línea 1: Léxico: - se encuentra mal escrito while");
                    }
                    break;
                case 6://do-while
                    if (codigoFuente.get(0).toString().substring(0, 2).equals("do")) {
                        casoDoWhile(codigoFuente);
                    } else {
                        ta_output.setText("Línea 1: Léxico: - se encuentra mal escrito do");
                    }
                    break;
                case 7:
                    ta_output.setText("Cadena incomprensible para el compilador");
                    break;
            }

        } catch (Exception e) {
            System.out.println("Error en el analisis Lexico " + e.getClass());
            ta_output.setText("Error en el analisis Lexico " + e.getClass());
        }
    }

    private void casoWhile(ArrayList codigoFuente) {
        try {
       
            String texto = "", linea = "";
            String var[] = null;
     
            byte parenDerecho = 0;
            for (int i = 0; i < codigoFuente.size(); i++) {
                linea = codigoFuente.get(i).toString();
               
                for (int j = 0; j < linea.length()-1; j++) {
                  
                    if (linea.charAt(j) == ')') {
                        parenDerecho++;
             
                        if (j < linea.length() - 1) {
                     
                            if (linea.charAt(j + 1) == '{') {
               
                                var = condicionGeneral(texto);

                                if (var[0].equals("0")) {
                                    ta_output.setText("Línea " + (i + 1) + ":" + var[1]);
                          
                                    break;
                                } else {
                                    if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == '}') {
                                        ta_output.setText("Compilado Correctamente");
                                        break;
                                    } else {
                                        ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave derecha");
                                        break;
                                    }
                                }
                            } else {
                                ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda");
                                break;
                            }
                        } else {//Evalua si la llave izquierda esta en la siguiente linea
                            if (i < codigoFuente.size() - 1) {
                                System.out.println("if sospechoso");
                                linea = codigoFuente.get(i + 1).toString();
                                if (linea.charAt(0) == '{') {
                                    var = condicionGeneral(texto);

                                    if (var[0].equals("0")) {
                                        ta_output.setText("Línea " + (i + 1) + ":" + var[1]);
                                        break;
                                    } else {
                                        if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == '}') {
                                            ta_output.setText("Compilado Correctamente");
                                            break;
                                        } else {
                                            ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave derecha");
                                            break;
                                        }
                                    }
                                } else {
                                    ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda");
                                    break;
                                }
                            } else {
                                ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda.");
                                break;
                            }
                        }
                    }
                    texto += linea.charAt(j);
                    if (texto.equals("while")) {
                        if (linea.length() > 2) {
                            if (linea.charAt(j + 1) == '(') {
                                texto = "";
                            } else {
                                if (linea.length() > 3) {
                                    if (linea.charAt(j + 2) == '(') {
                                        ta_output.setText("Línea " + (i + 1) + ": Lexico: Caracter sobrante en sentencia while.");
                                        parenDerecho++;
                                        break;
                                    } else {
                                        ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia");
                                        parenDerecho++;
                                        break;
                                    }
                                } else {
                                    System.out.println("texto " + texto + "  len " + texto.length());
                                    ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia");
                                    parenDerecho++;
                                    break;
                                }
                            }
                        } else {
                            System.out.println("texto " + texto + "  len " + texto.length());
                            ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia");
                            parenDerecho++;
                            break;
                        }
                    }
                }
            }
            if (parenDerecho == 0) {
                ta_output.setText("Sintáctico: falta paréntesis Derecho");
            }

        } catch (Exception e) {
            System.out.println("Error en caso while " + e.getClass());
        }
    }

    private void casoDoWhile(ArrayList codigoFuente) {
        System.out.println(codigoFuente.size());
        System.out.println(codigoFuente.get(0).toString());
        try {

            String texto = "", linea = "";
            String var[] = null;
            
            byte parenDerecho = 0;
            for (int i = 0; i < codigoFuente.size(); i++) {
                linea = codigoFuente.get(i).toString();
                System.out.println("primer for");
                for (int j = 0; j < linea.length(); j++) {
                        System.out.println("segundo for");
                    
                    if (linea.charAt(j) == ')') {
                        parenDerecho++;
                        var = condicionGeneral(texto);
                        if (var[0].equals("0")) {
                            ta_output.setText("Línea " + (i + 1) + ":" + var[1]);
                            break;
                        } else {
                            if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == ';') {
                                ta_output.setText("Compilado Correctamente");
                                break;
                            } else {
                                ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta punto y coma");
                                break;
                            }
                        }
                    }

                    texto += linea.charAt(j);
                    if (texto.equals("while")) {
                        texto = "";
                    }
                    if (texto.equals("{}")) {
                        texto = "";
                    }
                    if (texto.equals("do")) {
                        if (linea.length() > 2) {
                            if (linea.charAt(j + 1) == '{') {
                                texto = "";
                                if (linea.charAt(j + 2) == '}') {
                                } else {
                                    ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave derecha");
                                    parenDerecho++;
                                    break;
                                }
                            } else {

                                if (linea.length() > 3) {
                                    if (linea.charAt(j + 2) == '{') {
                                        ta_output.setText("Línea " + (i + 1) + ": Lexico: Caracter sobrante en sentencia while.");
                                        parenDerecho++;
                                        break;
                                    }
                                    ta_output.setText("Línea " + (i + 1) + ": sintactico: falta llave izquierda.");
                                    parenDerecho++;
                                    break;
                                    /*else {
                                     jTextField2.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia.aaaa");
                                     parenDerecho++;
                                     break;
                                     }*/

                                }
                                /* else {
                                 System.out.println("texto " + texto + "  len " + texto.length());
                                 jTextField2.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia.bbb");
                                 parenDerecho++;
                                 break;
                                 }*/
                            }
                        } /*else {
                         System.out.println("texto " + texto + "  len " + texto.length());
                         jTextField2.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia.ccc");
                         parenDerecho++;
                         break;
                         }*/
                    }
                }
            }
            if (parenDerecho == 0) {
                ta_output.setText("Sintáctico: falta paréntesis Derecho");
            }

        } catch (Exception e) {

            System.out.println("Error en caso Dowhile " + e.getClass());
        }
    }

    private void casoFor(ArrayList codigoFuente) {//analiza la cuestion sintactica del fuente
        try {

            String texto = "", linea = "";
            String var[] = null;

            byte parenDerecho = 0;
            for (int i = 0; i < codigoFuente.size(); i++) {
                linea = codigoFuente.get(i).toString();
                for (int j = 0; j < linea.length(); j++) {
                    if (linea.charAt(j) == ')') {
                        parenDerecho++;

                        if (j < linea.length() - 1) {
                            if (linea.charAt(j + 1) == '{') {
                                var = contenidoFor(texto);

                                if (var[0].equals("0")) {
                                    ta_output.setText("Línea " + (i + 1) + ":" + var[1]);
                                    break;
                                } else {
                                    if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == '}') {
                                        ta_output.setText("Compilado Correctamente");
                                        break;
                                    } else {
                                        ta_output.setText("Línea " + (codigoFuente.size() - 1) + ": Sintáctico: falta llave derecha");
                                        break;
                                    }
                                }
                            } else {
                                ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda");
                                break;
                            }
                        } else {//Evalua si la llave izquierda esta en la siguiente linea
                            if (i < codigoFuente.size() - 1) {
                                linea = codigoFuente.get(i + 1).toString();
                                if (linea.charAt(0) == '{') {
                                    var = contenidoFor(texto);

                                    if (var[0].equals("0")) {
                                        ta_output.setText("Línea " + (i + 1) + ":" + var[1]);
                                        break;
                                    } else {
                                        if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == '}') {
                                            ta_output.setText("Compilado Correctamente");
                                            break;
                                        } else {
                                            ta_output.setText("Línea " + (codigoFuente.size()) + ": Sintáctico: falta llave derecha");
                                            break;
                                        }
                                    }
                                } else {
                                    ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda");
                                    break;
                                }
                            } else {
                                ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda");
                                break;
                            }
                        }
                    }
                    texto += linea.charAt(j);
                    if (texto.equals("for")) {
                        if (linea.length() > 5) {
                            if (linea.charAt(j + 1) == '(') {
                                texto = "";
                            } else {
                                if (linea.charAt(j + 2) == '(') {
                                    ta_output.setText("Línea " + (i + 1) + ": Lexico: Caracter sobrante en sentencia for.");
                                    parenDerecho++;
                                    break;
                                } else {
                                    parenDerecho++;
                                    ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                                    break;
                                }
                            }
                        } else {
                            parenDerecho++;
                            ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                            break;
                        }
                    }
                }
            }
            if (parenDerecho == 0) {
                ta_output.setText("Sintáctico: falta paréntesis Derecho");
            }

        } catch (Exception e) {
            System.out.println("Error en caso for " + e.getClass());
        }
    }

    private int[] cuentaSimbolos(ArrayList codigoFuente) {
        int[] retorno = new int[7];
        String linea = "";

        try {
            for (int i = 0; i < codigoFuente.size(); i++) {
                linea = codigoFuente.get(i).toString();
                for (int j = 0; j < linea.length(); j++) {
                    switch (linea.charAt(j)) {
                        case '{':
                            if (j > 0 && j < (linea.length() - 1) && linea.charAt(j - 1) != '\"' && linea.charAt(j - 1) != '\'' && linea.charAt(j + 1) != '\"' && linea.charAt(j + 1) != '\'') {
                            } else {
                                retorno[0]++;
                            }
                            break;
                        case '}':
                            if (j > 0 && j < (linea.length() - 1) && linea.charAt(j - 1) != '\"' && linea.charAt(j - 1) != '\'' && linea.charAt(j + 1) != '\"' && linea.charAt(j + 1) != '\'') {
                            } else {
                                retorno[1]++;
                            }
                            break;
                        case '(':
                            if (j > 0 && j < (linea.length() - 1) && linea.charAt(j - 1) != '\"' && linea.charAt(j - 1) != '\'' && linea.charAt(j + 1) != '\"' && linea.charAt(j + 1) != '\'') {
                            } else {
                                retorno[2]++;
                            }
                            break;
                        case ')':
                            if (j > 0 && j < (linea.length() - 1) && linea.charAt(j - 1) != '\"' && linea.charAt(j - 1) != '\'' && linea.charAt(j + 1) != '\"' && linea.charAt(j + 1) != '\'') {
                            } else {
                                retorno[3]++;
                            }
                            break;
                        case '[':
                            if (j > 0 && j < (linea.length() - 1) && linea.charAt(j - 1) != '\"' && linea.charAt(j - 1) != '\'' && linea.charAt(j + 1) != '\"' && linea.charAt(j + 1) != '\'') {
                            } else {
                                retorno[4]++;
                            }
                            break;
                        case ']':
                            if (j > 0 && j < (linea.length() - 1) && linea.charAt(j - 1) != '\"' && linea.charAt(j - 1) != '\'' && linea.charAt(j + 1) != '\"' && linea.charAt(j + 1) != '\'') {
                            } else {
                                retorno[5]++;
                            }
                            break;
                        case '"':
                            if (j > 0 && j < (linea.length() - 1) && linea.charAt(j - 1) != '\"' && linea.charAt(j - 1) != '\'' && linea.charAt(j + 1) != '\"' && linea.charAt(j + 1) != '\'') {
                            } else {
                                retorno[6]++;
                            }
                            break;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error en cuenta Simbolos");
        } finally {
            return retorno;
        }
    }

    private String[] contenidoFor(String texto) {
        String[] retorno = new String[2];
        String variable = "";
        try {
            if (texto.length() > 0) {
                texto = texto.substring(1, texto.length());
            }
            retorno = texto.split(";");
            if (retorno.length == 3) {
                String var[] = Asignacion(retorno[0]);
                if (var[0].equals("0")) {
                    retorno[0] = "0";//Error
                    retorno[1] = var[1];//Nombre de error
                } else {//como exste variable se procede a verificar que se este usando en la segunda instruccion
                    variable = var[1];
                    var = Condicion(var[1], retorno[1]);

                    if (var[0].equals("0")) {
                        retorno[0] = "0";//Error
                        retorno[1] = var[1];//Nombre de error
                    } else {
                        var = Incremento(variable, retorno[2]);
                        if (var[0].equals("0")) {
                            retorno[0] = "0";//Error
                            retorno[1] = var[1];//Nombre de error
                        } else {
                            retorno[0] = "1";//Error
                            retorno[1] = "";//Nombre de error
                        }

                    }
                }
            } else {
                retorno[0] = "0";
                retorno[1] = "Sintáctico: mala construcción de la sentencia.";
            }
        } catch (Exception e) {
            System.out.println("Error en contenido For " + e.getCause());
        } finally {
            return retorno;
        }
    }

    private String[] Asignacion(String texto) {//evalua si una asignacion (int) esta bien escrita
        String[] retorno = new String[2];
        try {
            retorno = texto.split("=");
            if (retorno.length == 2) {
                if (retorno[0].toLowerCase().contains("int")) {
                    if (retorno[0].contains("int")) {
                        if (retorno[0].startsWith("int")) {
                            String aux[] = retorno[0].split("int");
                            if (aux.length == 2) {
                                retorno[0] = "1";//aceptacion
                                retorno[1] = aux[1];//nombre variable
                            } else {
                                retorno[0] = "0";//error
                                retorno[1] = "mala construcción de la sentencia.";
                            }
                        } else {
                            retorno[0] = "0";//error
                            retorno[1] = "mala construcción de la sentencia.";
                        }
                    } else {
                        retorno[0] = "0";
                        retorno[1] = "se encuentra mal escrito el int.";
                    }
                } else {
                    retorno[0] = "0";
                    retorno[1] = "no se encontro la palabra reservada int.";
                }
            } else {
                retorno[0] = "0";
                retorno[1] = "mala construcción de la sentencia.";
            }
        } catch (Exception e) {
            System.out.println("Error en Asignacion " + e.getClass());
        } finally {
            return retorno;
        }
    }

    private String[] Condicion(String variable, String condicion) {//evalua que este bien escrita la condicion 
        String retorno[] = new String[2];
        try {
            String[] simbolos = {"<=", ">=", "==", "!=", "<", ">"};
            String simbolo = "0";

            for (int i = 0; i < simbolos.length; i++) {//selecciona el simbolo de la condicion
                if (condicion.contains(simbolos[i])) {
                    simbolo = simbolos[i];
                    break;
                }
            }
            if (simbolo.equals("0")) {
                retorno[0] = "0";
                retorno[1] = "mala construcción de la sentencia.";
            } else {
                String var[] = condicion.split(simbolo);
                if (var.length == 2) {
                    if (esNumero(var[0])) {
                        if (esNumero(var[1])) {
                            retorno[0] = "1";
                            retorno[1] = "";
                        } else {
                            if (var[1].equals(variable)) {
                                retorno[0] = "1";
                                retorno[1] = "";
                            } else {
                                retorno[0] = "0";
                                retorno[1] = "no se reconoce la variable " + var[1] + ".";
                            }
                        }
                    } else {
                        if (var[0].equals(variable)) {
                            if (esNumero(var[1])) {
                                retorno[0] = "1";
                                retorno[1] = "";
                            } else {
                                retorno[0] = "0";
                                retorno[1] = "no se reconoce la variable " + var[1] + ".";
                            }
                        } else {
                            retorno[0] = "0";
                            retorno[1] = "no se reconoce la variable " + var[0] + ".";
                        }
                    }
                } else {
                    retorno[0] = "0";
                    retorno[1] = "mala construcción de la sentencia.";
                }
            }
        } catch (Exception e) {
            System.out.println("Error en condicion " + e.getClass());
        } finally {
            return retorno;
        }
    }

    private String[] condicionGeneral(String condicion) {//evalua que este bien escrita la condicion 
        String retorno[] = new String[2];
        try {
            String[] simbolos = {"<=", ">=", "==", "!=", "<", ">"};
            String simbolo = "0";

            if (condicion.length() > 3) {
                condicion = condicion.substring(1, condicion.length());
                for (int i = 0; i < simbolos.length; i++) {//selecciona el simbolo de la condicion
                    if (condicion.contains(simbolos[i])) {
                        simbolo = simbolos[i];
                        break;
                    }
                }
                if (simbolo.equals("0")) {
                    retorno[0] = "0";
                    retorno[1] = "mala construcción de la sentencia.";
                } else {
                    String var[] = condicion.split(simbolo);
                    if (var.length == 2) {
                        if (esNumero(var[0])) {
                            if (esNumero(var[1])) {
                                retorno[0] = "1";
                                retorno[1] = "";
                            } else {
                                if (var[1].matches("[a-zA-Z]*")) { //comprueba que solo contenga letas                                           
                                    byte aux = 0;

                                    for (int i = 0; i < codigo.size(); i++) {
                                        if (var[1].equals(codigo.get(i).toString())) {
                                            aux++;
                                        }
                                    }
                                    if (aux > 0) {
                                        retorno[0] = "1";
                                        retorno[1] = "";
                                    } else {
                                        retorno[0] = "0";
                                        retorno[1] = "no se reconoce la variable " + var[1] + ".";
                                    }
                                } else {
                                    retorno[0] = "0";
                                    retorno[1] = "mala construcción de la sentencia.";
                                }
                            }
                        } else {
                            if (var[0].matches("[a-zA-Z]*")) { //comprueba que solo contenga letras                                           
                                byte aux = 0;
                                for (int i = 0; i < codigo.size(); i++) {
                                    if (var[0].equals(codigo.get(i).toString())) {
                                        aux++;
                                    }
                                }
                                if (aux > 0) {
                                    if (esNumero(var[1])) {
                                        retorno[0] = "1";
                                        retorno[1] = "";
                                    } else {
                                        if (var[0].matches("[a-zA-Z]*")) { //comprueba que solo contenga letas                                           
                                            aux = 0;

                                            for (int i = 0; i < codigo.size(); i++) {
                                                if (var[1].equals(codigo.get(i).toString())) {
                                                    aux++;
                                                }
                                            }
                                            if (aux > 0) {
                                                retorno[0] = "1";
                                                retorno[1] = "";
                                            } else {
                                                retorno[0] = "0";
                                                retorno[1] = "no se reconoce la variable " + var[1] + ".";
                                            }
                                        } else {
                                            retorno[0] = "0";
                                            retorno[1] = "mala construcción de la sentencia.";
                                        }
                                    }
                                } else {
                                    retorno[0] = "0";
                                    retorno[1] = "no se reconoce la variable " + var[0] + ".";
                                }
                            } else {
                                retorno[0] = "0";
                                retorno[1] = "mala construcción de la sentencia.";
                            }

                        }
                    } else {
                        retorno[0] = "0";
                        retorno[1] = "mala construcción de la sentencia.";
                    }
                }
            } else {
                retorno[0] = "0";
                retorno[1] = "mala construcción de la sentencia.";
            }



        } catch (Exception e) {
            System.out.println("Error en condicion " + e.getClass());
        } finally {
            return retorno;
        }
    }

    private boolean esNumero(String cadena) {//valida siuna cadena es numerica
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    private String[] Incremento(String variable, String contador) {
        String retorno[] = new String[2];
        String aux[] = null;
        try {
            if (contador.equals(variable + "++") || contador.equals(variable + "--")) {
                retorno[0] = "1";
                retorno[1] = "";
            } else {
                if (contador.contains("+=")) {
                    aux = contador.split("\\+=");
                    if (aux.length == 2) {
                        if (aux[0].equals(variable)) {
                            if (esNumero(aux[1])) {
                                retorno[0] = "1";
                                retorno[1] = "";
                            } else {
                                if (aux[1].equals(variable)) {
                                    retorno[0] = "1";
                                    retorno[1] = "";
                                } else {
                                    retorno[0] = "0";
                                    retorno[1] = "se desconoce variable " + aux[0] + ".";
                                }
                            }
                        } else {
                            if (esNumero(aux[0])) {
                                retorno[0] = "0";
                                retorno[1] = "se esperaba Variable y se encontro valor.";
                            } else {
                                retorno[0] = "0";
                                retorno[1] = "se desconoce variable " + aux[0] + ".";
                            }
                        }
                    } else {
                        retorno[0] = "0";
                        retorno[1] = "mala construcción de la sentencia.";
                    }
                } else {
                    if (contador.contains("-=")) {
                        aux = contador.split("\\-=");
                        if (aux.length == 2) {
                            if (aux[0].equals(variable)) {
                                if (esNumero(aux[1])) {
                                    retorno[0] = "1";
                                    retorno[1] = "";
                                } else {
                                    if (aux[1].equals(variable)) {
                                        retorno[0] = "1";
                                        retorno[1] = "";
                                    } else {
                                        retorno[0] = "0";
                                        retorno[1] = "se desconoce variable " + aux[0] + ".";
                                    }
                                }
                            } else {
                                if (esNumero(aux[0])) {
                                    retorno[0] = "0";
                                    retorno[1] = "se esperaba Variable y se encontro valor.";
                                } else {
                                    retorno[0] = "0";
                                    retorno[1] = "se desconoce variable " + aux[0] + ".";
                                }
                            }
                        } else {
                            retorno[0] = "0";
                            retorno[1] = "mala construcción de la sentencia.";
                        }
                    } else {
                        if (contador.contains("=")) {
                            String var[] = contador.split("=");

                            if (var.length == 2) {
                                if (esNumero(var[0])) {
                                    retorno[0] = "0";
                                    retorno[1] = "se esperaba Variable y se encontro valor.";
                                } else {
                                    if (var[0].equals(variable)) {
                                        String simbolo = "0";
                                        if (var[1].contains("-")) {
                                            simbolo = "\\-";
                                        } else {
                                            if (var[1].contains("+")) {
                                                simbolo = "\\+";
                                            }
                                        }
                                        if (simbolo.equals("0")) {
                                            retorno[0] = "0";
                                            retorno[1] = "mala construcción de la sentencia.";
                                        } else {
                                            String aux1[] = var[1].split(simbolo);
                                            if (aux1.length == 2) {
                                                if (esNumero(aux1[0])) {
                                                    if (esNumero(aux1[1])) {
                                                        retorno[0] = "1";
                                                        retorno[1] = "";
                                                    } else {
                                                        if (aux1[1].equals(variable)) {
                                                            retorno[0] = "1";
                                                            retorno[1] = "";
                                                        } else {
                                                            retorno[0] = "0";
                                                            retorno[1] = "se desconoce variable " + aux1[1] + ".";
                                                        }
                                                    }
                                                } else {
                                                    if (aux1[0].equals(variable)) {
                                                        if (esNumero(aux1[1])) {
                                                            retorno[0] = "1";
                                                            retorno[1] = "";
                                                        } else {
                                                            if (aux1[1].equals(variable)) {
                                                                retorno[0] = "1";
                                                                retorno[1] = "";
                                                            } else {
                                                                retorno[0] = "0";
                                                                retorno[1] = "se desconoce variable " + aux1[1] + ".";
                                                            }
                                                        }
                                                    } else {
                                                        retorno[0] = "0";
                                                        retorno[1] = "se desconoce variable " + aux1[0] + ".";
                                                    }
                                                }
                                            } else {
                                                retorno[0] = "0";
                                                retorno[1] = "mala construcción de la sentencia.";
                                            }
                                        }
                                    } else {
                                        retorno[0] = "0";
                                        retorno[1] = "se desconoce variable " + var[0] + ".";
                                    }
                                }
                            } else {
                                retorno[0] = "0";
                                retorno[1] = "mala construcción de la sentencia.";
                            }
                        } else {
                            retorno[0] = "0";
                            retorno[1] = "mala construcción de la sentencia.";
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error en Incremento " + e.getClass());
        } finally {
            return retorno;
        }
    }

private void casoInt(ArrayList codigoFuente) {
        try {
            String linea = "", texto = "";
            String var[] = null;
            int aux = 0, salto = 0;
            ArrayList nuevoCaso = new ArrayList();

            for (int i = 0; i < codigoFuente.size(); i++) {
                linea = codigoFuente.get(i).toString();
                for (int j = 0; j < linea.length(); j++) {
                    texto += linea.charAt(j);
                    if (linea.charAt(j) == ';') {
                        if (texto.length() > 3) {
                            texto = texto.substring(3, texto.length());
                            var = texto.split(";");
                            texto = "";

                            if (var.length > 1) {
                                texto = var[1];//guarda el resto de la linea i
                            }
                            if (var[0].contains("=")) {//verifica que existe una igualacion
                                var = var[0].split("=");//separa la igualacion
                                if (var.length == 2) {//verifica que solo haya un '='
                                    if (var[0].length() != 0 && var[1].length() != 0) {//verifica que haya contenidoa lado ylado del igual

                                        if (esNumero(var[0])) {
                                            ta_output.setText("Se esperaba Variable y se encontro Valor.");
                                            salto = 1;
                                        } else {
                                            if (var[0].matches("[a-zA-Z]*")) { //comprueba que solo contenga letas                                           
                                                if (esNumero(var[1])) {//asigna la variable a el listado y pasa el resto a los demas metodos

                                                    aux = 0;
                                                    for (int k = 0; k < codigo.size(); k++) {//verifica que no exista la variable
                                                        if (var[0].equals(codigo.get(k))) {
                                                            aux++;
                                                        }
                                                    }
                                                    if (aux > 0) {
                                                        ta_output.setText("ya se ha definido una variable con el nombre de " + var[0]);
                                                        salto = 1;
                                                    } else {
                                                        codigo.add(var[0]);//adiciona la variable
                                                        if (texto.length() > 0) {
                                                            nuevoCaso.add(texto);
                                                        }
                                                        for (int k = (i + 1); k < codigoFuente.size(); k++) {
                                                            nuevoCaso.add(codigoFuente.get(k).toString());
                                                        }
                                                        if (nuevoCaso.size() > 0) {
                                                            salto = 2;
                                                        } else {
                                                            ta_output.setText("Compilado Correctamente");
                                                            salto = 1;
                                                        }

                                                    }
                                                } else {
                                                    if (var[1].matches("[a-zA-Z]*")) {//comprueba que solo contenga letas
                                                        for (int k = 0; k < codigo.size(); k++) {
                                                            if (var[1].equals(codigo.get(k))) {
                                                                aux++;
                                                            }
                                                        }
                                                        if (aux > 0) {//asigna la variable a el listado y pasa el resto a los demas metodos
                                                            aux = 0;
                                                            for (int k = 0; k < codigo.size(); k++) {//verifica que no exista la variable
                                                                if (var[0].equals(codigo.get(k))) {
                                                                    aux++;
                                                                }
                                                            }
                                                            if (aux > 0) {
                                                                ta_output.setText("ya se ha definido una variable con el nombre de " + var[0]);
                                                                salto = 1;
                                                            } else {
                                                                codigo.add(var[0]);//adiciona la variable
                                                                if (texto.length() > 0) {
                                                                    nuevoCaso.add(texto);
                                                                }
                                                                for (int k = (i + 1); k < codigoFuente.size(); k++) {
                                                                    nuevoCaso.add(codigoFuente.get(k).toString());
                                                                }
                                                                if (nuevoCaso.size() > 0) {
                                                                    salto = 2;
                                                                } else {
                                                                    ta_output.setText("Compilado Correctamente");
                                                                    salto = 1;
                                                                }
                                                            }
                                                        } else {//puesto que asigna una variable que no esta en el listado
                                                            aux = 0;
                                                            ta_output.setText("se desconoce variable " + var[1]);
                                                            salto = 1;

                                                        }
                                                    } else {
                                                        ta_output.setText("Linea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                                                        salto = 1;
                                                    }
                                                }
                                            } else {
                                                ta_output.setText("Linea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                                                salto = 1;
                                            }
                                        }
                                    } else {
                                        ta_output.setText("Linea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                                        salto = 1;
                                    }
                                } else {
                                    ta_output.setText("Linea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                                    salto = 1;
                                }
                            } else {
                                ta_output.setText("Linea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                                salto = 1;
                            }
                        } else {
                            ta_output.setText("Linea " + (i + 1) + ": Sintáctico: mala construcción de la sentencia.");
                            salto = 1;
                        }
                    } else {
                        if (i == (codigoFuente.size() - 1) && j == (linea.length() - 1)) {
                            ta_output.setText("Linea " + (i + 1) + ": Sintáctico: falta el punto y coma.");
                            salto = 1;
                        }
                    }

                }
                if (salto == 1) {
                    break;
                } else {
                    if (salto == 2) {
                        salto = 0;
                        analisisLexico(Caso(nuevoCaso), nuevoCaso);
                        break;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error en casoInt " + e.getClass());
        }
    }

    private void casoIf(ArrayList codigoFuente) {
        try {
            System.out.println("casoif ");
            String texto = "", linea = "";
            String var[] = null;

            byte parenDerecho = 0;
            for (int i = 0; i < codigoFuente.size(); i++) {
                linea = codigoFuente.get(i).toString();
                for (int j = 0; j < linea.length(); j++) {
                    if (linea.charAt(j) == ')') {
                        parenDerecho++;

                        if (j < linea.length() - 1) {
                            if (linea.charAt(j + 1) == '{') {
                                var = condicionGeneral(texto);

                                if (var[0].equals("0")) {
                                    ta_output.setText("Línea " + (i + 1) + ":" + var[1]);
                                    break;
                                } else {
                                    if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == '}') {
                                        ta_output.setText("Compilado Correctamente");
                                        break;
                                    } else {
                                        ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave derecha");
                                        break;
                                    }
                                }
                            } else {
                                ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda");
                                break;
                            }
                        } else {//Evalua si la llave izquierda esta en la siguiente linea
                            if (i < codigoFuente.size() - 1) {
                                linea = codigoFuente.get(i + 1).toString();
                                if (linea.charAt(0) == '{') {
                                    var = condicionGeneral(texto);

                                    if (var[0].equals("0")) {
                                        ta_output.setText("Línea " + (i + 1) + ":" + var[1]);
                                        break;
                                    } else {
                                        if (codigoFuente.get(codigoFuente.size() - 1).toString().charAt(codigoFuente.get(codigoFuente.size() - 1).toString().length() - 1) == '}') {
                                            ta_output.setText("Compilado Correctamente");
                                            break;
                                        } else {
                                            ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave derecha");
                                            break;
                                        }
                                    }
                                } else {
                                    ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda");
                                    break;
                                }
                            } else {
                                ta_output.setText("Línea " + (i + 1) + ": Sintáctico: falta llave izquierda.");
                                break;
                            }
                        }
                    }
                    texto += linea.charAt(j);
                    if (texto.equals("if")) {
                        if (linea.length() > 2) {
                            if (linea.charAt(j + 1) == '(') {
                                texto = "";
                            } else {
                                if (linea.length() > 3) {
                                    if (linea.charAt(j + 2) == '(') {
                                        ta_output.setText("Línea " + (i + 1) + ": Lexico: Caracter sobrante en sentencia if.");
                                        parenDerecho++;
                                        break;
                                    } else {
                                        ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia. _01");
                                        parenDerecho++;
                                        break;
                                    }
                                } else {
                                    System.out.println("texto " + texto + "  len " + texto.length());
                                    ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia. _02");
                                    parenDerecho++;
                                    break;
                                }
                            }
                        } else {
                            System.out.println("texto " + texto + "  len " + texto.length());
                            ta_output.setText("Línea " + (i + 1) + ": Sintáctico: mala construccion de la sentencia. _03");
                            parenDerecho++;
                            break;
                        }
                    }
                }
            }
            if (parenDerecho == 0) {
                ta_output.setText("Sintáctico: falta paréntesis Derecho");
            }

        } catch (Exception e) {
            System.out.println("Error en caso if " + e.getClass());
        }
    }

    //evalua si hay transposicion
private String[] Transposicion(String texto) {
        String retorno[] = new String[2];
        retorno[0] = "1";
        retorno[1] = "";
        texto = texto.toLowerCase();
        try {//evalua si hay transposicion en el while
            if (texto.contains("w") && texto.contains("h") && texto.contains("i") && texto.contains("l") && texto.contains("e")) {
                if (!texto.equals("while") && texto.length() == 5) {
                    retorno[0] = "0";
                    retorno[1] = "Lexico: Transposicion de caracteres en sentencia while.";
                }
            } else {//evalua si hay transposicion en el if
                if (texto.contains("i") && texto.contains("f")) {
                    if (!texto.equals("if") && texto.length() == 2) {
                        retorno[0] = "0";
                        retorno[1] = "Lexico: Transposicion de caracteres en sentencia if.";
                    }
                } else {//evalua si hay transposicion en el int
                    if (texto.contains("i") && texto.contains("n") && texto.contains("t")) {
                        if (!texto.equals("int") && texto.length() == 3) {
                            retorno[0] = "0";
                            retorno[1] = "Lexico: Transposicion de caracteres en sentencia int.";
                        }
                    } else {//evalua si hay transposicion en el for
                        if (texto.contains("f") && texto.contains("o") && texto.contains("r")) {
                            if (!texto.equals("for") && texto.length() == 3) {
                                retorno[0] = "0";
                                retorno[1] = "Lexico: Transposicion de caracteres en sentencia for.";
                            }
                        } else {//evalua si hay transposicion en el do while
                            if (texto.contains("d") && texto.contains("o")) {
                                if (!texto.equals("do") && texto.length() == 2) {
                                    retorno[0] = "0";
                                    retorno[1] = "Lexico: Transposicion de caracteres en sentencia do.";
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error en metodo de Transposicion");
        } finally {
            return retorno;
        }
    }
    
    private String[] Sobrante(String texto) {
        String retorno[] = new String[2];
        retorno[0] = "1";
        retorno[1] = "";
        texto = texto.toLowerCase();
        try {//evalua si hay transposicion en el while
            if (texto.contains("w") && texto.contains("h") && texto.contains("i") && texto.contains("l") && texto.contains("e")) {
                if (texto.length() == 6 && texto.startsWith("while")) {
                    retorno[0] = "0";
                    retorno[1] = "Lexico: Caracter sobrante en sentencia while.";
                }
            } else {//evalua si hay transposicion en el if
                if (texto.contains("i") && texto.contains("f")) {
                    if (texto.length() == 3 && texto.startsWith("if")) {
                        retorno[0] = "0";
                        retorno[1] = "Lexico: Caracter sobrante en sentencia if.";
                    }
                } else {//evalua si hay transposicion en el int
                    if (texto.contains("i") && texto.contains("n") && texto.contains("t")) {
                        if (texto.length() == 4 && texto.startsWith("int")) {
                            retorno[0] = "0";
                            retorno[1] = "Lexico: Caracter sobrante en sentencia int.";
                        }
                    } else {//evalua si hay transposicion en el for
                        if (texto.contains("f") && texto.contains("o") && texto.contains("r")) {
                            if (texto.length() == 4 && texto.startsWith("for")) {
                                retorno[0] = "0";
                                retorno[1] = "Lexico: Caracter sobrante en sentencia for.";
                            }
                        } else {//evalua si hay transposicion en el do while
                            if (texto.contains("d") && texto.contains("o")) {
                                if (texto.length() == 3 && texto.startsWith("do")) {
                                    retorno[0] = "0";
                                    retorno[1] = "Lexico: Caracter sobrante en sentencia do.";
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error en metodo de Sobrante");
        } finally {
            return retorno;
        }
    }

    private String[] noPertenece(String texto) {
        String retorno[] = new String[2];
        retorno[0] = "1";
        retorno[1] = "";
        texto = texto.toLowerCase();
        try {//evalua si hay transposicion en el while
            if (texto.contains("w") && texto.contains("h") && texto.contains("i") && texto.contains("l") && texto.contains("e")) {
                if (texto.length() == 6) {
                    retorno[0] = "0";
                    retorno[1] = "Lexico: Caracter no pertenece al lexema while.";
                }
            } else {//evalua si hay transposicion en el if
                if (texto.contains("i") && texto.contains("f")) {
                    if (texto.length() == 3) {
                        retorno[0] = "0";
                        retorno[1] = "Lexico: Caracter no pertenece al lexema if.";
                    }
                } else {//evalua si hay transposicion en el int
                    if (texto.contains("i") && texto.contains("n") && texto.contains("t")) {
                        if (texto.length() == 4) {
                            retorno[0] = "0";
                            retorno[1] = "Lexico: Caracter no pertenece al lexema int.";
                        }
                    } else {//evalua si hay transposicion en el for
                        if (texto.contains("f") && texto.contains("o") && texto.contains("r")) {
                            if (texto.length() == 4) {
                                retorno[0] = "0";
                                retorno[1] = "Lexico: Caracter no pertenece al lexema for.";
                            }
                        } else {//evalua si hay transposicion en el do while
                            if (texto.contains("d") && texto.contains("o")) {
                                if (texto.length() == 3) {
                                    retorno[0] = "0";
                                    retorno[1] = "Lexico: Caracter no pertenece al lexema do.";
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error en metodo de noPertenece");
        } finally {
            return retorno;
        }
    }

    private String[] faltaCaracer(String texto) {
        String retorno[] = new String[2];
        retorno[0] = "1";
        retorno[1] = "";
        texto = texto.toLowerCase();
        try {//evalua si hay transposicion en el while
            if ((texto.contains("w") && texto.contains("h") && texto.contains("i") && texto.contains("l")) || (texto.contains("w") && texto.contains("h") && texto.contains("i") && texto.contains("e"))
                    || (texto.contains("w") && texto.contains("h") && texto.contains("l") && texto.contains("e")) || (texto.contains("w") && texto.contains("i") && texto.contains("l") && texto.contains("e"))
                    || (texto.contains("l") && texto.contains("h") && texto.contains("i") && texto.contains("e"))) {
                if (texto.length() == 4) {
                    retorno[0] = "0";
                    retorno[1] = "Lexico: Falta un Caracter en lexema while.";
                }
            } else { //evalua si hay transposicion en el int
                if ((texto.contains("i") && texto.contains("n")) || (texto.contains("i") && texto.contains("t")) || (texto.contains("t") && texto.contains("n"))) {
                    if (texto.length() == 2) {
                        retorno[0] = "0";
                        retorno[1] = "Lexico: Falta un Caracter en lexema int.";
                    }
                } else {//evalua si hay transposicion en el for
                    if ((texto.contains("f") && texto.contains("o")) || (texto.contains("f") && texto.contains("r")) || (texto.contains("r") && texto.contains("o"))) {
                        if (texto.length() == 2) {
                            retorno[0] = "0";
                            retorno[1] = "Error Lexico: Falta un Caracter en lexema for.";
                        }
                    } else {//evalua si hay transposicion en el do while
                        if (texto.contains("d") || texto.contains("o")) {
                            if (texto.length() == 1) {
                                retorno[0] = "0";
                                retorno[1] = "Error lexico: Falta un Caracter en lexema do.";
                            }
                        } else {
                            //evalua si hay transposicion en el if
                            if (texto.contains("i") || texto.contains("f")) {
                                if (texto.length() == 1) {
                                    retorno[0] = "0";
                                    retorno[1] = "Error lexico: Falta un Caracter en lexema if.";
                                }
                            }
                        }
                    }
                }

            }
        } catch (Exception e) {
            System.out.println("Error en metodo de falta Caracter");
        } finally {
            return retorno;
        }
    }

}
